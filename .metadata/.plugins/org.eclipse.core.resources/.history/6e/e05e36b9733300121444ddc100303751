package com.example.data;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class AdapterCursos {
	
	// los id
	public static final String KEY_ROWIDP = "idP"; //id en el servidor. 0 si no existe en el servidor
    public static final String KEY_ROWIDH = "idH";
    public static final String KEY_ROWIDC = "idC";
    public static final String KEY_ROWIDCOM = "idCom";
    public static final String KEY_ROWIIDP = "iidP"; //IID=INTERNALID
    public static final String KEY_ROWIIDH = "iidH";
    public static final String KEY_ROWIIDC = "iidC";
    public static final String KEY_ROWIIDCOM = "iidCom";
	
	//tabla profesores
	
	public static final String KEY_USUARIO = "usuario";
	public static final String KEY_CONTRASENA = "contrasena";
	public static final String KEY_NOMBRE = "nombre";
	public static final String KEY_APELLIDO = "apellido";
	
	//tabla horarios
	
	public static final String KEY_DDS = "dds";
    public static final String KEY_INICIO = "inicio";
    public static final String KEY_FIN = "fin";
    public static final String KEY_UBICACION = "ubicacion";
    
    //tabla cursos
	
    public static final String KEY_TITLE = "title";
    public static final String KEY_COMENTABLE = "comentable";
    public static final String KEY_COLOR = "color";
    
    //tabla comentarios
    
    public static final String KEY_COMENTARIO = "comentario";
    public static final String KEY_FECHA = "fecha";
    
    private static final String TAG = "AdapterCursos";
    private static final String DATABASE_NAME= "OrganizadorDB";
    private static final String DATABASE_TABLE_CURSOS = "Cursos";
    private static final String DATABASE_TABLE_HORARIOS = "Horarios";
    private static final String DATABASE_TABLE_COMENTARIOS = "Comentarios";
    private static final String DATABASE_TABLE_PROFESORES = "Profesores";
    private static final int DATABASE_VERSION = 9;

    private static final String TABLE_CREATE_CURSOS =
        "create table if not exists Cursos (iidC integer primary key autoincrement, idC integer, iidP integer, title VARCHAR not null, comentable integer, color VARCHAR not null);";
        
    private static final String TABLE_CREATE_HORARIOS =
        "create table if not exists Horarios (iidH integer primary key autoincrement, idH integer, iidC integer, dds integer, inicio date, fin date, ubicacion VARCHAR);";
    
    private static final String TABLE_CREATE_PROFESORES =
        "create table if not exists Profesores (iidP integer primary key autoincrement, idP integer, usuario VARCHAR, contrasena VARCHAR, nombre VARCHAR, apellido VARCHAR);";
    
    private static final String TABLE_CREATE_COMENTARIOS =
        "create table if not exists Comentarios (iidCom integer primary key autoincrement, idCom integer, iidH integer, fecha date, comentario text);";
    
    private final Context context;    

    private DatabaseHelper DBHelper;
    private SQLiteDatabase db;

    public AdapterCursos(Context ctx) 
    {
        this.context = ctx;
        DBHelper = new DatabaseHelper(context);
    }
        
    private static class DatabaseHelper extends SQLiteOpenHelper 
    {
        DatabaseHelper(Context context) 
        {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) 
        {
        	try {
        		db.execSQL(TABLE_CREATE_CURSOS);	
        		db.execSQL(TABLE_CREATE_HORARIOS);
        		db.execSQL(TABLE_CREATE_PROFESORES);
        		db.execSQL(TABLE_CREATE_COMENTARIOS);
        	} catch (SQLException e) {
        		e.printStackTrace();
        	}
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) 
        {
            Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
                    + newVersion + ", which will destroy all old data");
            db.execSQL("DROP TABLE IF EXISTS Cursos");
            db.execSQL("DROP TABLE IF EXISTS Horarios");
            db.execSQL("DROP TABLE IF EXISTS Profesores");
            db.execSQL("DROP TABLE IF EXISTS Comentarios");
            onCreate(db);
        }
    }    

    //---opens the database---
    public AdapterCursos open() throws SQLException 
    {
        db = DBHelper.getWritableDatabase();
        return this;
    }

    //---closes the database---    
    public void close() 
    {
        DBHelper.close();
    }
    
    //---insert a record into the database---
    public long insertRecordCURSOS(int idC, int iidP, String title, int comentable) 
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_ROWIDC, idC);
        initialValues.put(KEY_ROWIIDP, iidP);
        initialValues.put(KEY_TITLE, title);
        initialValues.put(KEY_COMENTABLE, comentable);
        return db.insert(DATABASE_TABLE_CURSOS, null, initialValues);
    }

    //---deletes a particular record---
    public boolean deleteContactCURSOS(long rowId) 
    {
        return db.delete(DATABASE_TABLE_CURSOS,KEY_ROWIIDC + "=" + rowId, null) > 0;
    }

    //---retrieves all the records---
    public Cursor getAllRecordsCURSOS() //ARREGLANDO...
    {
    	return db.query(DATABASE_TABLE_CURSOS, null, null, null, null, null, null);
    }
    
    public Cursor getAllIdsCURSOS()
    {
    	return db.query(DATABASE_TABLE_CURSOS, new String[] {KEY_ROWIIDC}, null, null, null, null, null);
    	
    }

    //---retrieves a particular record---
    public Cursor getRecordCURSOS(long rowId) throws SQLException 
    {
    	Cursor mCursor =
                db.query(DATABASE_TABLE_CURSOS, new String[] {KEY_ROWIIDC, KEY_ROWIDC, KEY_ROWIIDP, 
                KEY_TITLE, KEY_COMENTABLE}, 
                KEY_ROWIIDC + "=" + rowId, null, null, null, null, null);
    	if (mCursor != null) {
    		
    		mCursor.moveToFirst();
               }
        return mCursor;
    }
    

    //---updates a record---
    public boolean updateRecordCURSOS(long rowId, String idC, String iidP, String title, int comentable) 
    {
        ContentValues args = new ContentValues();
        args.put(KEY_ROWIDC, idC);
        args.put(KEY_ROWIIDP, iidP);
        args.put(KEY_TITLE, title);
        args.put(KEY_COMENTABLE, comentable);
        return db.update(DATABASE_TABLE_CURSOS, args, KEY_ROWIIDC + "=" + rowId, null) > 0;
    }
    
    public long insertRecordHORARIOS(int idH,int iidC,String diaDeLaSemana,String inicio, String fin, String ubicacion) 
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_ROWIDH, idH);
        initialValues.put(KEY_ROWIIDC, iidC);
        initialValues.put(KEY_DDS, diaDeLaSemana);
        initialValues.put(KEY_INICIO, inicio);
        initialValues.put(KEY_FIN, fin);
        initialValues.put(KEY_UBICACION, ubicacion);
        return db.insert(DATABASE_TABLE_HORARIOS, null, initialValues);
    }
    
    public boolean deleteContactHORARIOS(long rowId) 
    {
        return db.delete(DATABASE_TABLE_HORARIOS, KEY_ROWIIDH + "=" + rowId, null) > 0;
    }
    
    public Cursor getAllRecordsHORARIOS() 
    {
        return db.query(DATABASE_TABLE_HORARIOS, null, null, null, null, null, null);
    }
    
    public Cursor getAllIdsHORARIOS()
    {
    	 return db.query(DATABASE_TABLE_HORARIOS, new String[] {KEY_ROWIIDH}, null, null, null, null, null);
    }
    
    public Cursor getModulosSiguientesHORARIOS(String diaDeLaSemana,String hora, String limit) {
  		// TODO Auto-generated method stub
      	return db.query(DATABASE_TABLE_HORARIOS, null, "("+KEY_DDS+"="+diaDeLaSemana+" and " +KEY_INICIO+">='"+hora+"')"+" or " + KEY_DDS+">="+diaDeLaSemana, null, null, null, KEY_DDS+","+KEY_INICIO,limit);
  	}
    
    public Cursor getModulosSiguientesDelDiaHORARIOS(String diaDeLaSemana,String hora,String limit)
      {
      	return db.query(DATABASE_TABLE_HORARIOS, null, "("+KEY_DDS+"="+diaDeLaSemana+" and " +KEY_INICIO+">='"+hora+"')", null, null, null, KEY_INICIO,limit);
      }
      
      public Cursor getModulosInicioEntreHORARIOS(String diaDeLaSemana, String desde,String hasta)
      {
      	return db.query(DATABASE_TABLE_HORARIOS, null,KEY_DDS+"="+diaDeLaSemana+" AND "+KEY_INICIO+">='"+desde+"' AND "+ KEY_INICIO+ "<='"+hasta+"'", null, null, null, KEY_INICIO);
      }
      
      public Cursor getModulosFinEntreHORARIOS(String diaDeLaSemana, String desde,String hasta)
      {
      	return db.query(DATABASE_TABLE_HORARIOS, null, KEY_DDS+"="+diaDeLaSemana+" AND "+KEY_FIN+">='"+desde+"' AND "+ KEY_FIN+ "<='"+hasta+"'", null, null, null, KEY_FIN);
      }
    
    public Cursor getRecordHORARIOS(long rowId) throws SQLException 
    {
        Cursor mCursor =
                db.query(true, DATABASE_TABLE_HORARIOS, new String[] {KEY_ROWIIDH, KEY_ROWIDH, KEY_ROWIIDC, KEY_DDS,
                KEY_INICIO, KEY_FIN, KEY_UBICACION}, 
                KEY_ROWIIDH + "=" + rowId, null, null, null, null, null);
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
    }
    
    public Cursor getRecordPorCursoHORARIOS(String idCurso)
    {
    	 Cursor mCursor =
                 db.query(true, DATABASE_TABLE_HORARIOS, new String[] {KEY_ROWIIDH, KEY_ROWIDH, KEY_ROWIIDC, KEY_DDS,
                 KEY_INICIO, KEY_FIN, KEY_UBICACION}, 
                 KEY_ROWIIDC + "=" + idCurso, null, null, null, null, null);
         if (mCursor != null) {
             mCursor.moveToFirst();
         }
         return mCursor;
    }
    
    public boolean updateRecordHORARIOS(long rowId, String id_horario,String id_curso,String diaDeLaSemana,String inicio, String fin, String ubicacion) 
    {
        ContentValues args = new ContentValues();
        args.put(KEY_ROWIDH, id_horario);
        args.put(KEY_ROWIIDC, id_curso);
        args.put(KEY_DDS, diaDeLaSemana);
        args.put(KEY_INICIO, inicio);
        args.put(KEY_FIN, fin);
        args.put(KEY_UBICACION, ubicacion);
        return db.update(DATABASE_TABLE_HORARIOS, args, KEY_ROWIIDH + "=" + rowId, null) > 0;
    }
    //AGREGAR METODOS DE LAS NUEVAS TABLAS
    public long insertRecordPROFESORES(int idP,String usuario,String contrasena,String nombre, String apellido) 
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_ROWIDP, idP);
        initialValues.put(KEY_USUARIO, usuario);
        initialValues.put(KEY_CONTRASENA, contrasena);
        initialValues.put(KEY_NOMBRE, nombre);
        initialValues.put(KEY_APELLIDO, apellido);
        return db.insert(DATABASE_TABLE_PROFESORES, null, initialValues);
    }
    
    public long insertRecordCOMENTARIOS(int idCom,int iidH,String fecha,String comentario) 
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_ROWIDCOM, idCom);
        initialValues.put(KEY_ROWIIDH, iidH);
        initialValues.put(KEY_FECHA, fecha);
        initialValues.put(KEY_COMENTARIO, comentario);
        return db.insert(DATABASE_TABLE_COMENTARIOS, null, initialValues);
    }

}
